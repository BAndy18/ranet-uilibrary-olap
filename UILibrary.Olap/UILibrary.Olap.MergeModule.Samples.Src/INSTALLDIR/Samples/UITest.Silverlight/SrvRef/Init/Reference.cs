//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace UILibrary.Olap.UITestApplication.Init {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Init.InitializeWebServiceSoap")]
    public interface InitializeWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/InitConnectionString", ReplyAction="*")]
        System.IAsyncResult BeginInitConnectionString(UILibrary.Olap.UITestApplication.Init.InitConnectionStringRequest request, System.AsyncCallback callback, object asyncState);
        
        UILibrary.Olap.UITestApplication.Init.InitConnectionStringResponse EndInitConnectionString(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class InitConnectionStringRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="InitConnectionString", Namespace="http://tempuri.org/", Order=0)]
        public UILibrary.Olap.UITestApplication.Init.InitConnectionStringRequestBody Body;
        
        public InitConnectionStringRequest() {
        }
        
        public InitConnectionStringRequest(UILibrary.Olap.UITestApplication.Init.InitConnectionStringRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class InitConnectionStringRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string connectionName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string connectionString;
        
        public InitConnectionStringRequestBody() {
        }
        
        public InitConnectionStringRequestBody(string connectionName, string connectionString) {
            this.connectionName = connectionName;
            this.connectionString = connectionString;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class InitConnectionStringResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="InitConnectionStringResponse", Namespace="http://tempuri.org/", Order=0)]
        public UILibrary.Olap.UITestApplication.Init.InitConnectionStringResponseBody Body;
        
        public InitConnectionStringResponse() {
        }
        
        public InitConnectionStringResponse(UILibrary.Olap.UITestApplication.Init.InitConnectionStringResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class InitConnectionStringResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string InitConnectionStringResult;
        
        public InitConnectionStringResponseBody() {
        }
        
        public InitConnectionStringResponseBody(string InitConnectionStringResult) {
            this.InitConnectionStringResult = InitConnectionStringResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface InitializeWebServiceSoapChannel : UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class InitConnectionStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InitConnectionStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class InitializeWebServiceSoapClient : System.ServiceModel.ClientBase<UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap>, UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap {
        
        private BeginOperationDelegate onBeginInitConnectionStringDelegate;
        
        private EndOperationDelegate onEndInitConnectionStringDelegate;
        
        private System.Threading.SendOrPostCallback onInitConnectionStringCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public InitializeWebServiceSoapClient() {
        }
        
        public InitializeWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InitializeWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InitializeWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InitializeWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<InitConnectionStringCompletedEventArgs> InitConnectionStringCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap.BeginInitConnectionString(UILibrary.Olap.UITestApplication.Init.InitConnectionStringRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInitConnectionString(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginInitConnectionString(string connectionName, string connectionString, System.AsyncCallback callback, object asyncState) {
            UILibrary.Olap.UITestApplication.Init.InitConnectionStringRequest inValue = new UILibrary.Olap.UITestApplication.Init.InitConnectionStringRequest();
            inValue.Body = new UILibrary.Olap.UITestApplication.Init.InitConnectionStringRequestBody();
            inValue.Body.connectionName = connectionName;
            inValue.Body.connectionString = connectionString;
            return ((UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap)(this)).BeginInitConnectionString(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UILibrary.Olap.UITestApplication.Init.InitConnectionStringResponse UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap.EndInitConnectionString(System.IAsyncResult result) {
            return base.Channel.EndInitConnectionString(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndInitConnectionString(System.IAsyncResult result) {
            UILibrary.Olap.UITestApplication.Init.InitConnectionStringResponse retVal = ((UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap)(this)).EndInitConnectionString(result);
            return retVal.Body.InitConnectionStringResult;
        }
        
        private System.IAsyncResult OnBeginInitConnectionString(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string connectionName = ((string)(inValues[0]));
            string connectionString = ((string)(inValues[1]));
            return this.BeginInitConnectionString(connectionName, connectionString, callback, asyncState);
        }
        
        private object[] OnEndInitConnectionString(System.IAsyncResult result) {
            string retVal = this.EndInitConnectionString(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInitConnectionStringCompleted(object state) {
            if ((this.InitConnectionStringCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InitConnectionStringCompleted(this, new InitConnectionStringCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InitConnectionStringAsync(string connectionName, string connectionString) {
            this.InitConnectionStringAsync(connectionName, connectionString, null);
        }
        
        public void InitConnectionStringAsync(string connectionName, string connectionString, object userState) {
            if ((this.onBeginInitConnectionStringDelegate == null)) {
                this.onBeginInitConnectionStringDelegate = new BeginOperationDelegate(this.OnBeginInitConnectionString);
            }
            if ((this.onEndInitConnectionStringDelegate == null)) {
                this.onEndInitConnectionStringDelegate = new EndOperationDelegate(this.OnEndInitConnectionString);
            }
            if ((this.onInitConnectionStringCompletedDelegate == null)) {
                this.onInitConnectionStringCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInitConnectionStringCompleted);
            }
            base.InvokeAsync(this.onBeginInitConnectionStringDelegate, new object[] {
                        connectionName,
                        connectionString}, this.onEndInitConnectionStringDelegate, this.onInitConnectionStringCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap CreateChannel() {
            return new InitializeWebServiceSoapClientChannel(this);
        }
        
        private class InitializeWebServiceSoapClientChannel : ChannelBase<UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap>, UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap {
            
            public InitializeWebServiceSoapClientChannel(System.ServiceModel.ClientBase<UILibrary.Olap.UITestApplication.Init.InitializeWebServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginInitConnectionString(UILibrary.Olap.UITestApplication.Init.InitConnectionStringRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("InitConnectionString", _args, callback, asyncState);
                return _result;
            }
            
            public UILibrary.Olap.UITestApplication.Init.InitConnectionStringResponse EndInitConnectionString(System.IAsyncResult result) {
                object[] _args = new object[0];
                UILibrary.Olap.UITestApplication.Init.InitConnectionStringResponse _result = ((UILibrary.Olap.UITestApplication.Init.InitConnectionStringResponse)(base.EndInvoke("InitConnectionString", _args, result)));
                return _result;
            }
        }
    }
}
